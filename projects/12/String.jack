// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int size;
    field int maxSize;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxSize = maxLength;
        if (~(maxLength = 0)) {
            let chars = Array.new(maxLength);
        }
        let size = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(maxSize = 0)) {
            do chars.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];   // TODO Error handling when array index is exceeded
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;  // TODO Error handling when array index is exceeded
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[size] = c;  // TODO Error handling when size if larger than maxLength
        let size = size + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let size = size - 1;  // TODO Error handling when size is 0
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i;
        var boolean isNegative;
        let val = 0;

        if (chars[0] = 45) {
            let isNegative = true;
            let i = 1;
        }
        else {
            let isNegative = false;
            let i = 0;
        }

        while ((i < size) & (chars[i] > 47) & (chars[i] < 58)) {
            let val = (val * 10) + (chars[i] - 48);
            let i = i + 1;
        }
        if (isNegative) {
            let val = -val;
        }
        return val;
    }

    /** setInt helper function **/
    method void setIntHelper(int val){
        var int all_but_last, last;
        let all_but_last = val / 10;
        let last = val - (all_but_last * 10);
        if (all_but_last = 0) {
            do appendChar(last + 48);
            return;
        }
        else {
            do setIntHelper(all_but_last);
            do appendChar(last + 48);
            return;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {  // TODO Overflow handling, and what to do if val < 0
        let size = 0;  // earse the whole string
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        do setIntHelper(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
