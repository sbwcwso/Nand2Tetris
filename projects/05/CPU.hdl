// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* A instruction or C instruction */
    Mux(a=false, b=instruction[0], sel=instruction[15], out=j3);
    Mux(a=false, b=instruction[1], sel=instruction[15], out=j2);
    Mux(a=false, b=instruction[2], sel=instruction[15], out=j1);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=loadD);

    /* A register */
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=loadA1);
    Or(a=loadA1, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    // Register(in=inA, load=loadA, out=outA);
    

    /* D register */
    DRegister(in=outALU, load=loadD, out=outD);
    // Register(in=outALU, load=instruction[4], out=outD);

    /* Get the y input of ALU */
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);

    /* ALU */
    ALU(x=outD, y=outAM,
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f =instruction[7], 
        no=instruction[6],
        out=outM, out=outALU, zr=zr, ng=ng
    );

    /* PC */
                                /* no jump(000) */
    Or(a=zr, b=ng, out=NJGT);   
    Not(in=NJGT, out=JGT);      /* zr == 0 and ng == 0, JGT(001) jump */
    And(a=zr, b=zr, out=JEQ);   /* zr == 1, JEQ(010) jump */
    Not(in=ng, out=JGE);        /* ng == 0, JGE(011) jump */
    And(a=ng, b=ng, out=JLT);   /* ng == 1, JLT(100) jump */
    Not(in=zr, out=JNE);        /* zr == 0, JNE(101) jump */
    Or(a=ng, b=zr, out=JLE);    /* ng == 1 or zr == 1, JLE(110) jump */
                                /* Uncondition jump(111) */
    
    Mux(a=JLE, b=true, sel=j3, out=pc11x);
    Mux(a=JLT, b=JNE, sel=j3, out=pc10x);

    Mux(a=JEQ, b=JGE, sel=j3, out=pc01x);
    Mux(a=false, b=JGT, sel=j3, out=pc00x);

    Mux(a=pc10x, b=pc11x, sel=j2, out=pc1xx);
    Mux(a=pc00x, b=pc01x, sel=j2, out=pc0xx);

    Mux(a=pc0xx, b=pc1xx, sel=j1, out=loadPC);

    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}
